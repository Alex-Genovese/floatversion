#!/bin/bash

# (c) Alex Genovese  https://github.com/TuxVinyards/floatversion
# License: MIT

# Extracts point separated numbers, or semantic version numbers with optional suffixes,
# and other common variations upon, from a given string or text list

# Sorts to unique or listed entries, or latest, in std numeric or sem. ver. 

# Outputs as space separated string, in line separated column or as selectable array

# Uses'jq' for version sorting as only Gnu sort has 'sort -V'  
# and this is noticably absent both in Debian based distros and with MacOS
# jq code source - https://stackoverflow.com/a/77961624/27611101

# http://semver.org/ versioning does not list well in file managers ...

if [ -z "$(command -v bash)" ] || [ "$(echo "$BASH_VERSION" | cut -d. -f1)" -lt 5 ]; then
  echo; echo "  Sorry, you need Bash, probably 5.0 or newer to run this script."; echo
  echo "  FloatVersion has only been tested on up-to-date versions of Bash"; echo
  echo "  Certain elements require at least ver 4.2 .... "; echo
  echo "  Your version: "; echo
  bash --version
  echo
fi

float_version_from_string ()  {

	show_help () {
	  printf "
  floatversion --options --input \"QUOTED-string\"
  Without options, outputs the highest/latest value in list. 
  All cases, returns false if none

  -h | --help         show help 
  -V | --version      show version
  -s | --str          show list as single string
  -c | --col          show list as column
  -a | --all          show all extracted values, not just unique
  -A | --arr          output global array 'fvOutputArr'
  -n | --num          sort by standard numbering, not versioning
  -f | --full         check for additional sem. ver. suffixes,  eg. -beta
  -i | --input        input string, text or list
    
"
  }

  local ShowAsCol=
  local ShowAsStr=
  local ShowAll=
  local SortNum=
  local GrepFull=
  local InputString=
  local ArrayIsGlobal=
  declare -a NumArrTemp 
  declare -a NumArrSorted 

  while [[ "$1" ]] ; do
    case "$1" in 
      --help|-h)  
        show_help ; return 0 ;;
      -V|--version)  
        echo "0.2" ; return 0 ;;
      -s|--str)
        ShowAsStr=1 ; shift ;;
      -c|--col)
        ShowAsCol=1 ; shift ;;
      -a|--all)
        ShowAll=1 ; shift ;;
      -A|--arr)
        ArrayIsGlobal=1 ; shift ;;
      -n|--num)
        SortNum=1 ; shift ;;
      -f|--full)
        GrepFull=1 ; shift ;;
      -i|--input)
        [[ ! $2 ]] && show_help && return 1
        InputString="$2" ; shift $# ;;
      *) 
        printf "\n\n  ERROR:  '%s'  not recognised \n\n"  "$1"
        show_help ; return 1 ;;
    esac
  done

  # sanitize
  [[ -e "$InputString" ]] && InputString="$(cat -A "$InputString")"
  InputString="$(tr -cd '[:print:]' <<< "$InputString" | tr ';' ' ' | tr '$' ' ')" 
  [[ ! $InputString ]] && return 1

  echo; echo "Str:"; echo "$InputString"; echo

  if [[ $ArrayIsGlobal ]]; then  declare -a fvOutputArr
  else  declare -ga fvOutputArr 
  fi

  if [[ $GrepFull ]]; then 
    Nums="$(grep -Eo '[0-9]+([.][0-9]+)+([.][0-9]+)?+([.][0-9]+)?+([.][0-9]+)?+([-][[:alnum:]]+)?+([.][[:digit:]]+)?' <<< "$InputString" )"
    printf -v Nums "%s\n" "$Nums"
    Nums+="$(grep -Eo '[0-9]+([.][0-9]+)+([.][0-9]+)?+([.][0-9]+)?+([.][0-9]+)?+([_][[:alnum:]]+)' <<< "$InputString" )"
    printf -v Nums "%s\n" "$Nums"
    Nums+="$(grep -Eo '[0-9]+([.][0-9]+)+([.][0-9]+)?+([.][0-9]+)?+([.][0-9]+)?+([.][[:alnum:]]+)' <<< "$InputString" )"
  else
   Nums="$(grep -Eo '[0-9]+([.][0-9]+)+([.][0-9]+)?+([.][0-9]+)?+([.][0-9]+)?' <<< "$InputString" )"
  fi

  # further sanitize
  Nums="$(grep '[[:digit:]]' <<< "$Nums")"
  echo "Nums: ($(grep -c '[[:digit:]]' <<< "$Nums"))"; echo "$Nums"; echo
  [[ ! $Nums ]] && return 1

  mapfile -t NumArrTemp  <<< "$(tr ' ' '\n' <<< "$Nums")"

  declare -p NumArrTemp ; echo

  if [[ $ShowAll ]]; then 
    mapfile -t  NumArrSorted <<< "$(printf "%s\n" "${NumArrTemp[@]}" | sort )"
  else
    mapfile -t  NumArrSorted <<< "$(printf "%s\n" "${NumArrTemp[@]}" | sort -u )"
  fi

  declare -p NumArrSorted ; echo
  
  if [[ $SortNum ]]; then
    mapfile -t  fvOutputArr <<< "$(printf "%s\n" "${NumArrSorted[@]}")"
  else
    mapfile -t  fvOutputArr <<< "$(printf "%s\n" "${NumArrSorted[@]}" | jq -Rrn '
    # read input lines as an array
    [inputs]
    |sort_by(
      # ignore build
      split("+")[0]
      # extract version core and pre-release as arrays of numbers and strings
      |split("-")|(.[0]|split(".")|map(tonumber? // .)) as $version_core
      |(.[1:]|join("-")|split(".")|map(tonumber? // .)) as $pre_release
      # sort by
      |$version_core,
      # pre-release versions have a lower precedence than the associated normal version
      ($pre_release|length)==0,
      # sort by 
      $pre_release
    )
    #extract values from an array
    |.[]'
    )"
  fi    

  if [[ $ShowAsStr ]] || [[ $ShowAll ]] && [[ ! $ShowAsCol ]]; then
    printf "%s  " "${fvOutputArr[@]}"
    printf "\n"
  elif [[ $ShowAsCol ]]; then
    printf "%s\n" "${fvOutputArr[@]}"
  else
    echo "${fvOutputArr[-1]}"
  fi

}

float_version_from_string "$@"


# https://code.visualstudio.com/ 
# vim:tabstop=2:shiftwidth=2:expandtab